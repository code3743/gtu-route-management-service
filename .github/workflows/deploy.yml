name: Deploy to VPS

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests
        run: mvn test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure SSH access
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Verify SSH connection
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo SSH connection successful"

      - name: Ensure deploy directory exists
        run: ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "mkdir -p ~/deploy/${{ github.event.repository.name }}"

      - name: Copy project files to VPS
        run: |
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deploy/${{ github.event.repository.name }}/

      - name: Deploy services with Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ~/deploy/${{ github.event.repository.name }}
            echo "SWAGGER_SERVER_URL=${{ secrets.SWAGGER_SERVER_URL }}" > .env
            docker compose down --remove-orphans
            docker compose build
            docker compose up -d --remove-orphans
            docker system prune -f
          EOF
      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚úÖ *Deployment successful!* üöÄ\nRepository: `${{ github.repository }}`\nBranch: `${{ github.ref }}`\nCommit: `${{ github.sha }}`\nAuthor: `${{ github.actor }}`"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"‚ùå *Deployment failed!* üî•\nRepository: `${{ github.repository }}`\nBranch: `${{ github.ref }}`\nCommit: `${{ github.sha }}`\nAuthor: `${{ github.actor }}`"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
